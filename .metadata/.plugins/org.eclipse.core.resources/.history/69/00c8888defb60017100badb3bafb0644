package com.example.demo.controller;


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.PathVariable;

import com.example.demo.model.KecamatanModel;
import com.example.demo.model.KeluargaModel;
import com.example.demo.model.KelurahanModel;
import com.example.demo.model.KotaModel;
import com.example.demo.model.PendudukModel;
import com.example.demo.service.SidukService;

@Controller
public class SidukController
{
    @Autowired
    SidukService sidukDAO;
    @RequestMapping("/")
    public String index ()
    {
        return "index";
    }
    
    @RequestMapping(value= "/penduduk", method = RequestMethod.GET)
    public String detailPenduduk (Model model,
            @RequestParam(value = "nik", required=false) String nik)
    {
    	if(nik==""){
    		String errorArgs= "NIK harus diisi!";
    		model.addAttribute("errorNIKArgs", errorArgs);
    		return "index";
    	}
    	
    	if(!nik.matches("\\d*")){
    		String errorArgs= "NIK tidak boleh mengandung huruf!";
    		model.addAttribute("errorNIKArgs", errorArgs);
    		return "index";
    	}
    	 PendudukModel penduduk = sidukDAO.selectPenduduk(nik);
    
    	 if(penduduk!= null){
	    	 model.addAttribute ("penduduk", penduduk);
	        return "detail-penduduk";
	      }
    	 else{
	    	 model.addAttribute("nomor",nik);
	    	 return "error/not-found";	
    	 }
    }
    
    @RequestMapping(value="/penduduk/tambah", method = RequestMethod.GET)
    public String addPenduduk (Model model, PendudukModel penduduk)
    {
        return "form-tambah-penduduk";
    }
    
    @RequestMapping(value= "/penduduk/tambah", method = RequestMethod.POST)
    public String addPendudukSubmit (Model model, @Valid PendudukModel penduduk, BindingResult bindingResult)
    {
    	if(bindingResult.hasErrors()) {
    		return "form-tambah-penduduk";
    	} else {
    		KeluargaModel keluarga = sidukDAO.selectKeluarga(penduduk.getId_keluarga());
    		String kodeKecamatan = keluarga.getKelurahan().getKecamatan().getKode_kecamatan().substring(0, 6);
    		
    		Date ymd = null;
    		try {
    			ymd = new SimpleDateFormat("yyyy-MM-dd").parse(penduduk.getTanggal_lahir());			
    		} catch (Exception e) {
    			
    		}
    		
    		String tglLahir = new SimpleDateFormat("dd-MM-yyyy").format(ymd);		
    		String nikTglLahir = tglLahir.replace("-", "");
    		nikTglLahir = nikTglLahir.substring(0,4) + nikTglLahir.substring(6,8);
    		
    		if(penduduk.getJenis_kelamin() == 1){
    			Integer tanggal = Integer.parseInt(nikTglLahir.substring(0,2));
    			tanggal +=40;
    			nikTglLahir = String.valueOf(tanggal) + nikTglLahir.substring(2,6);
    		}
    		
    		String nikMin= kodeKecamatan + nikTglLahir + "0001";
    		String nikMax= kodeKecamatan + nikTglLahir + "9999";
    		PendudukModel cekPenduduk = sidukDAO.selectPendudukTerakhir(nikMin, nikMax);
    		
    		if(cekPenduduk == null){
    			penduduk.setNik(nikMin);
    			sidukDAO.addPenduduk(penduduk);
    			model.addAttribute("nomor", nikMin);
    		}else{
    			Long nikBaru = Long.parseLong(cekPenduduk.getNik());
    			String nikPendudukBaru = String.valueOf(nikBaru+1);
    			penduduk.setNik(nikPendudukBaru);
    			sidukDAO.addPenduduk(penduduk);
    			model.addAttribute("nomor", nikPendudukBaru);
    		}
    		return "sukses-tambah-penduduk";
    	}
    }
    
    @RequestMapping(value= "/penduduk/ubah/{nik}", method = RequestMethod.GET)
    public String updatePenduduk (Model model, @PathVariable(value = "nik") String nik)
    {
        PendudukModel penduduk = sidukDAO.selectPenduduk(nik);
        
        if(penduduk==null){
        	model.addAttribute("nomor",nik);
        	return "error/not-found";
        }else{
        	model.addAttribute("pendudukModel", penduduk);
        }
        
    	return "form-update-penduduk";
    }
    
    @RequestMapping(value= "/penduduk/ubah/{nik}", method = RequestMethod.POST)
    public String updatePendudukSubmit (@PathVariable(value="nik") String nik, Model model, @Valid PendudukModel penduduk, BindingResult bindingResult)
    {
    	PendudukModel arsipPenduduk = sidukDAO.selectPenduduk(nik);
    	
    	 if(arsipPenduduk==null){
         	model.addAttribute("nomor",nik);
         	return "error/not-found";
         }
    	if(bindingResult.hasErrors()) {
    		return "form-update-penduduk";
    	} else {
    		penduduk.setId(arsipPenduduk.getId());
    		if(arsipPenduduk.getTanggal_lahir() == penduduk.getTanggal_lahir()){
    			String nikBaru;

    			if(penduduk.getJenis_kelamin() != arsipPenduduk.getJenis_kelamin()){
    				if(penduduk.getJenis_kelamin() == 1){
	        			Integer tanggal = Integer.parseInt(penduduk.getNik().substring(6,8));
	        			tanggal +=40;
	        			nikBaru = penduduk.getNik().substring(0, 6)+String.valueOf(tanggal)+penduduk.getNik().substring(8, 16);
    				}else{
	    				Integer tanggal = Integer.parseInt(penduduk.getNik().substring(6,8));
	        			tanggal -=40;
	        			nikBaru = penduduk.getNik().substring(0, 6)+String.valueOf(tanggal)+penduduk.getNik().substring(8, 16);
    				}
	        			penduduk.setNik(nikBaru);
        		}

    			sidukDAO.updatePenduduk(penduduk);
    		}else{
    			Date ymd = null;
    			try {
        			ymd = new SimpleDateFormat("yyyy-MM-dd").parse(penduduk.getTanggal_lahir());			
        		} catch (Exception e) {
        			
        		}
    			String tglLahir = new SimpleDateFormat("dd-MM-yyyy").format(ymd);
    	  		String nikTglLahir = tglLahir.replace("-", "");
        		nikTglLahir = nikTglLahir.substring(0,4) + nikTglLahir.substring(6,8);
        		
        		if(penduduk.getJenis_kelamin() == 1){
        			Integer tanggal = Integer.parseInt(nikTglLahir.substring(0,2));
        			tanggal +=40;
        			nikTglLahir = String.valueOf(tanggal) + nikTglLahir.substring(2,6);
        		}
        		String nikMin= penduduk.getNik().substring(0, 6) + nikTglLahir + "0001";
        		String nikMax= penduduk.getNik().substring(0, 6) + nikTglLahir + "9999";
        		PendudukModel cekPenduduk = sidukDAO.selectPendudukTerakhir(nikMin, nikMax);
        		
        		if(cekPenduduk == null){
        			penduduk.setNik(nikMin);
    			sidukDAO.updatePenduduk(penduduk);
        			model.addAttribute("nomor", nikMin);
        		}else{
        			Long nikBaru = Long.parseLong(cekPenduduk.getNik());
        			String nikPendudukBaru = String.valueOf(nikBaru+1);
        			penduduk.setNik(nikPendudukBaru);
        			sidukDAO.updatePenduduk(penduduk);
        			model.addAttribute("nomor", nikPendudukBaru);
        		}

    		}
        	model.addAttribute("nomor", penduduk.getNik());
    	}
	   	return "sukses-update-penduduk";
   }
    
    @RequestMapping(value= "/penduduk/{nik}", method=RequestMethod.GET)
    public String setStatusKematian (Model model,
            @PathVariable(value = "nik") String nik)
    {
	    	PendudukModel penduduk = sidukDAO.selectPenduduk(nik);
	    	 if(penduduk==null){
	         	model.addAttribute("nomor",nik);
	         	return "error/not-found";
	         }
	    	
	    	int wafat = 1;
	    	
	    	penduduk.setIs_wafat(wafat);
	    	sidukDAO.updatePenduduk(penduduk);
	    		 
    		List<PendudukModel> anggotaKeluarga = sidukDAO.selectAnggotaKeluarga(penduduk.getKeluarga().getNomor_kk());
    		int jmlWafat=0;
    		
    		for(int i = 0; i< anggotaKeluarga.size();i++){
    			if(anggotaKeluarga.get(i).getIs_wafat() == wafat){
    				jmlWafat++;
    			}
    		}
    		
    		int tidakBerlaku= 1;
    		if(jmlWafat == anggotaKeluarga.size()){
    			penduduk.getKeluarga().setIs_tidak_berlaku(tidakBerlaku);
    			sidukDAO.updateKeluarga(penduduk.getKeluarga());
    		}
    		
	    	model.addAttribute ("nomor", penduduk.getNik());
	        return "sukses-update-penduduk";
	      
    }
        
        
    @RequestMapping(value= "/penduduk/cari", method = RequestMethod.GET)
    public String cariPendudukSubmit (Model model, @RequestParam(value = "kt") Optional<Integer> idKota,
    		@RequestParam(value = "kc") Optional<Integer> idKecamatan,
    		@RequestParam(value = "kl") Optional<Integer> idKelurahan)
    {
    	// Cari penduduknya
    	if(idKota.isPresent() && idKecamatan.isPresent() && idKelurahan.isPresent()) {
    		List <PendudukModel> listPenduduk = sidukDAO.selectListPenduduk(idKelurahan.get());
    	
    		PendudukModel pendudukTertua = sidukDAO.selectPendudukTertua(idKelurahan.get());
    		PendudukModel pendudukTermuda = sidukDAO.selectPendudukTermuda(idKelurahan.get());

    		model.addAttribute("pendudukTertua", pendudukTertua);
    		model.addAttribute("pendudukTermuda", pendudukTermuda);
    		model.addAttribute("listPenduduk", listPenduduk);

    		return "list-penduduk"; 
    		
    	} 
    	// Return form pencarian
    	else {
    		List<KotaModel> daftarKota = sidukDAO.selectDaftarKota();
        	List<KecamatanModel> daftarKecamatan = sidukDAO.selectDaftarKecamatan();
        	List<KelurahanModel> daftarKelurahan = sidukDAO.selectDaftarKelurahan();
        	
        	model.addAttribute("daftarKota", daftarKota);
        	model.addAttribute("daftarKecamatan", daftarKecamatan);
        	model.addAttribute("daftarKelurahan", daftarKelurahan);
            return "form-cari-penduduk";
    	}
    }
	    
    @RequestMapping(value = "/keluarga",method = RequestMethod.GET)
    public String anggotaKeluarga(Model model,
    		@RequestParam(value="nkk") String nkk){
    	if(nkk==""){
    		String errorArgs= "NKK harus diisi!";
    		model.addAttribute("errorNKKArgs", errorArgs);
    		return "index";
    	}
    	KeluargaModel keluarga = sidukDAO.selectKartuKeluarga(nkk);
    	 	
    	 if(keluarga!= null){
    		List<PendudukModel> anggotaKeluarga = sidukDAO.selectAnggotaKeluarga(nkk);
    		model.addAttribute("anggota", anggotaKeluarga);
    		model.addAttribute("keluarga", keluarga);
    		return "detail-keluarga";
	      }
    	 else{
	    	 model.addAttribute("nomor",nkk);
	    	 return "error/not-found";	
    	 }
   }
    
    @RequestMapping(value="/keluarga/tambah", method = RequestMethod.GET)
    public String addKeluarga (Model model, KeluargaModel keluarga)
    {
    	List<KotaModel> daftarKota = sidukDAO.selectDaftarKota();
    	List<KecamatanModel> daftarKecamatan = sidukDAO.selectDaftarKecamatan();
    	List<KelurahanModel> daftarKelurahan = sidukDAO.selectDaftarKelurahan();
    	
    	model.addAttribute("daftarKota", daftarKota);
    	model.addAttribute("daftarKecamatan", daftarKecamatan);
    	model.addAttribute("daftarKelurahan", daftarKelurahan);
        return "form-tambah-keluarga";
    }
        
    @RequestMapping(value= "/keluarga/tambah", method = RequestMethod.POST)
    public String addKeluargaSubmit (Model model, @Valid KeluargaModel keluarga, BindingResult bindingResult,
    		@RequestParam(value = "kota") Integer idKota,
    		@RequestParam(value = "kecamatan") Integer idKecamatan,
    		@RequestParam(value = "kelurahan") Integer idKelurahan){
    	
    	Date date = new Date();
		String currentDate  = new SimpleDateFormat("dd-MM-yyyy").format(date);
		currentDate= currentDate.replace("-", "");
		currentDate= currentDate.substring(0,4) + currentDate.substring(6,8);
		KelurahanModel kelurahan = sidukDAO.selectKelurahan(idKelurahan);
		String kodeKecamatan = kelurahan.getKecamatan().getKode_kecamatan().substring(0, 6);
		
		
		String nkkMin= kodeKecamatan + currentDate + "0001";
		String nkkMax= kodeKecamatan + currentDate + "9999";
		KeluargaModel cekKeluarga = sidukDAO.selectKeluargaTerakhir(nkkMin, nkkMax);
		
		if(cekKeluarga == null){
			keluarga.setNomor_kk(nkkMin);
			model.addAttribute("nomor", nkkMin);
		}else{
			Long nkkBaru = Long.parseLong(cekKeluarga.getNomor_kk());
			String nkkKeluargaBaru = String.valueOf(nkkBaru+1);
			keluarga.setNomor_kk(nkkKeluargaBaru);
			model.addAttribute("nomor", nkkKeluargaBaru);
		}
	
		keluarga.setId_kelurahan(idKelurahan);
		sidukDAO.addKeluarga(keluarga);
    	return "sukses-tambah-keluarga";

    }
    
    @RequestMapping(value= "/keluarga/ubah/{nkk}", method = RequestMethod.GET)
    public String updateKeluarga (Model model, @PathVariable(value = "nkk") String nkk)
    {
        KeluargaModel keluarga = sidukDAO.selectKartuKeluarga(nkk);
      
        
        if(keluarga==null){
        	model.addAttribute("nomor",nkk);
        	return "error/not-found";
        }else{
        	
        	
    		List<KotaModel> daftarKota = sidukDAO.selectDaftarKota();
        	List<KecamatanModel> daftarKecamatan = sidukDAO.selectDaftarKecamatan();
        	List<KecamatanModel> daftarKecamatanSaya = new ArrayList<>();
        	List<Integer> temp = new ArrayList<>();
        	for(KecamatanModel e: daftarKecamatan) {
        		if (e.getId_kota() == keluarga.getKelurahan().getKecamatan().getId_kota()) {
        			daftarKecamatanSaya.add(e);
        			temp.add(e.getId());
        		}
        	}
        	List<KelurahanModel> daftarKelurahan = sidukDAO.selectDaftarKelurahan();
        	List<KelurahanModel> daftarKelurahanSaya = new ArrayList<>();
        	for(KelurahanModel e: daftarKelurahan) {
        		if (temp.contains(e.getId_kecamatan())) {
        			daftarKelurahanSaya.add(e);
        		}
        	}
        	
        	model.addAttribute("daftarKota", daftarKota);
        	model.addAttribute("daftarKecamatan", daftarKecamatan);
        	model.addAttribute("daftarKecamatanSaya", daftarKecamatanSaya);
        	model.addAttribute("daftarKelurahan", daftarKelurahan);
        	model.addAttribute("daftarKelurahanSaya", daftarKelurahanSaya);
        	model.addAttribute("keluargaModel", keluarga);
        }
        
    	return "form-update-keluarga";
    }

    @RequestMapping(value= "/keluarga/ubah/{nkk}", method = RequestMethod.POST)
    public String updateKeluargaSubmit (@PathVariable(value="nkk") String nkk, Model model,
    		@RequestParam(value = "alamat") String alamat,
    		@RequestParam(value = "rt") String rt,
    		@RequestParam(value = "rw") String rw,
    		@RequestParam(value = "kota") Integer id_kota,
    		@RequestParam(value = "kecamatan") Integer id_kecamatan,
    		@RequestParam(value = "kelurahan") Integer id_kelurahan)
    {
    	
    	
    	KeluargaModel arsipKeluarga = sidukDAO.selectKartuKeluarga(nkk);
 
    	 if(arsipKeluarga==null){
         	model.addAttribute("nomor",nkk);
         	return "error/not-found";
         }
    	
    //	arsipKeluarga.setId(arsipKeluarga.getId());
    	Date date = new Date();
		String currentDate  = new SimpleDateFormat("dd-MM-yyyy").format(date);
		currentDate= currentDate.replace("-", "");
		currentDate= currentDate.substring(0,4) + currentDate.substring(6,8);
	
   		if(id_kecamatan != arsipKeluarga.getKelurahan().getKecamatan().getId()){
    		
   			KelurahanModel kelurahan = sidukDAO.selectKelurahan(id_kelurahan);
   			String kodeKecamatanBaru = kelurahan.getKecamatan().getKode_kecamatan().substring(0, 6);
    		String nkkMin= kodeKecamatanBaru + currentDate+ "0001";
    		String nkkMax= kodeKecamatanBaru + currentDate + "9999";
    		
    		KeluargaModel cekKeluarga = sidukDAO.selectKeluargaTerakhir(nkkMin, nkkMax);
    		
    		if(cekKeluarga == null){
    			arsipKeluarga.setNomor_kk(nkkMin);
    		}else{
    			Long nkkBaru = Long.parseLong(cekKeluarga.getNomor_kk());
    			String nkkKeluargaBaru = String.valueOf(nkkBaru+1);
    			arsipKeluarga.setNomor_kk(nkkKeluargaBaru);
  
    		}  		
    		
    		    		
    		List<PendudukModel> anggotaKeluarga = sidukDAO.selectAnggotaKeluarga(nkk);
    		for(int i = 0; i< anggotaKeluarga.size();i++){
    			String nikMin= kodeKecamatanBaru + anggotaKeluarga.get(i).getNik().substring(6, 12) + "0001";
        		String nikMax= kodeKecamatanBaru + anggotaKeluarga.get(i).getNik().substring(6, 12) + "9999";
    			PendudukModel cekPenduduk = sidukDAO.selectPendudukTerakhir(nikMin, nikMax);
    			if(cekPenduduk == null){
    				anggotaKeluarga.get(i).setNik(nikMin);
        			sidukDAO.updatePenduduk(anggotaKeluarga.get(i));
        			
        			model.addAttribute("nomor", nikMin);
        		}else{
        			Long nikBaru = Long.parseLong(cekPenduduk.getNik());
        			String nikPendudukBaru = String.valueOf(nikBaru+1);
        			anggotaKeluarga.get(i).setNik(nikPendudukBaru);
        			sidukDAO.updatePenduduk(anggotaKeluarga.get(i));
        			model.addAttribute("nomor", nikPendudukBaru);
        		}
       		}
    		
     	}else{
			String nkkUpdateDate = arsipKeluarga.getNomor_kk().substring(0, 6) + currentDate + arsipKeluarga.getNomor_kk().substring(12, 16);      		
	     
			String nkkMin= nkkUpdateDate.substring(0, 12) + "0001";
	    	String nkkMax= nkkUpdateDate.substring(0, 12)  + "9999";
	    		
    		KeluargaModel cekKeluarga = sidukDAO.selectKeluargaTerakhir(nkkMin, nkkMax);
    		
    		if(cekKeluarga == null){
    			arsipKeluarga.setNomor_kk(nkkMin);
    		}else{
    			Long nkkBaru = Long.parseLong(cekKeluarga.getNomor_kk());
    			String nkkKeluargaBaru = String.valueOf(nkkBaru+1);
    			arsipKeluarga.setNomor_kk(nkkKeluargaBaru);
  
    		}  		
     	}
   		
   		arsipKeluarga.setAlamat(alamat);
		arsipKeluarga.setRt(rt);
		arsipKeluarga.setRw(rw);
		arsipKeluarga.setId_kelurahan(id_kelurahan);
		sidukDAO.updateKeluarga(arsipKeluarga);
		model.addAttribute("nomor", arsipKeluarga.getNomor_kk());
    	
    	return"sukses-update-keluarga";
    }
}
